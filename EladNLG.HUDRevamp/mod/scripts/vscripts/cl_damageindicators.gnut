global function Cl_DamageIndicator_Init
global function PlayerDidDamageText
// ()
const vector OUTGOING_DAMAGE_TEXT_BEGIN_POS = <0.525, 0.4, 0>
const float OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME = 0.5
const float OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME = 0.5
const float OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME = 0.8

const vector INCOMING_DAMAGE_TEXT_BEGIN_POS = <0.63, 0.5 - 0.3, 0>
const float INCOMING_DAMAGE_TEXT_SMALL_FADE_TIME = 0.5
const float INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME = 0.5
const float INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME = 0.8

var stackingOutgoingDamageTextRui;
float accumulatedOutgoingDamage = 0.0;
float lastOutgoingDamageTextHitTime = 0.0;

var stackingIncomingDamageTextRui;
float accumulatedIncomingDamage = 0.0;
float lastIncomingDamageTextHitTime = 0.0;

void function Cl_DamageIndicator_Init()
{
	foreach ( k, v in eDamageSourceId )
	{
		AddLocalPlayerTookDamageCallback( v, PlayerTookDamage )
	}
	#if MP
		//ClPilotSpeedometer_Init()
	#endif
    thread Thread_StackingDamageFlyoutText()
}

void function PlayerTookDamage( float damage, vector pos, int damageType, int damageSourceId, entity attacker )
{
	if (!GetLocalViewPlayer().IsTitan()) return
	if (Time() - lastIncomingDamageTextHitTime > INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME)
		accumulatedIncomingDamage = damage
	else accumulatedIncomingDamage += damage
	lastIncomingDamageTextHitTime = Time() // :D
	RuiSetString( stackingIncomingDamageTextRui, "msgText", format( "-%i", int( accumulatedIncomingDamage ) ) )
}

void function ResetStackingDamageFlyoutText(float damage, bool isCrit, entity victim)
{
	accumulatedOutgoingDamage = damage
	if (stackingOutgoingDamageTextRui == null) return
	RuiSetString( stackingOutgoingDamageTextRui, "msgText", accumulatedOutgoingDamage.tointeger().tostring() )
	float msgFontSize = GraphCapped( accumulatedOutgoingDamage, victim.IsTitan() ? 500 : 50, victim.IsTitan() ? 10000 : 200, 36, victim.IsTitan() ? 56 : 48 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", msgFontSize)
	RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS - <0, GraphCapped(msgFontSize, 36, 72, 0.0, 0.05), 0> )
	RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
}

void function AddDamageToStackingDamageFlyoutText(float damage, bool isCrit, entity victim)
{
	accumulatedOutgoingDamage += damage
	if (stackingOutgoingDamageTextRui == null) return
	RuiSetString( stackingOutgoingDamageTextRui, "msgText", accumulatedOutgoingDamage.tointeger().tostring() )
	float msgFontSize = GraphCapped( accumulatedOutgoingDamage, victim.IsTitan() ? 500 : 50, victim.IsTitan() ? 10000 : 200, 36, victim.IsTitan() ? 56 : 48 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", msgFontSize)
	RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS - <0, GraphCapped(msgFontSize, 36, 72, 0.0, 0.05), 0> )
	RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
}

void function AddSmallDamageTextFlyout(float damage, bool isCrit)
{
	var rui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoCockpitHudPermanent, RUI_DRAW_COCKPIT, 0)
	RuiSetInt( rui, "maxLines", 1 );
	RuiSetInt( rui, "lineNum", 1 );
	RuiSetFloat2( rui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS )
	RuiSetString( rui, "msgText",  damage.tointeger().tostring() )
	RuiSetFloat3( rui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
	RuiSetFloat( rui, "msgFontSize", 24.0)
	RuiSetFloat( rui, "msgAlpha", 0.5 )
	RuiSetFloat( rui, "thicken", 0.0 )

	float startTime = Time()
	while ( Time() - startTime < OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME )
	{
		float alpha = Graph( Time() - startTime, 0, OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME, 0.5, 0 )
		vector posOffset = OUTGOING_DAMAGE_TEXT_BEGIN_POS
		posOffset.y += Graph( Time() - startTime, 0, OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME, 0, -0.05 )
		RuiSetFloat( rui, "msgAlpha", alpha )
		RuiSetFloat2( rui, "msgPos", posOffset )
		WaitFrame()
	}
	RuiDestroyIfAlive(rui)
}

void function Thread_StackingDamageFlyoutText()
{
	WaitFrame()
	// outgoing damage text
	stackingOutgoingDamageTextRui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoCockpitHudPermanent, RUI_DRAW_COCKPIT, 1)
	RuiSetInt( stackingOutgoingDamageTextRui, "maxLines", 1 );
	RuiSetInt( stackingOutgoingDamageTextRui, "lineNum", 1 );
	RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS )
	RuiSetFloat( stackingOutgoingDamageTextRui, "thicken", 0.0 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", 36.0)
	RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", <0.9, 0.9, 0.9> )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgAlpha", 0.9 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "thicken", 0.0 )

	// incoming damage text
	stackingIncomingDamageTextRui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoTitanCockpitHud, RUI_DRAW_COCKPIT, 1)
	RuiSetInt( stackingIncomingDamageTextRui, "maxLines", 1 );
	RuiSetInt( stackingIncomingDamageTextRui, "lineNum", 0 );
	RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS )
	RuiSetFloat( stackingIncomingDamageTextRui, "thicken", 0.0 )
	RuiSetFloat( stackingIncomingDamageTextRui, "msgFontSize", 40.0)
	RuiSetFloat3( stackingIncomingDamageTextRui, "msgColor", <0.85, 0.0, 0.0> )
	RuiSetFloat( stackingIncomingDamageTextRui, "msgAlpha", 0.9 )
	RuiSetFloat( stackingIncomingDamageTextRui, "thicken", 0.0 )

	while (true)
	{
		// outgoing damage text update
		float timeSinceLastHit = Time() - lastOutgoingDamageTextHitTime
		float alpha = GraphCapped( timeSinceLastHit - OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME, 0, OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME, 0.9, 0)
		RuiSetFloat( stackingOutgoingDamageTextRui, "msgAlpha", alpha )

		// incoming damage text update
		
		timeSinceLastHit = Time() - lastIncomingDamageTextHitTime
		alpha = GraphCapped( timeSinceLastHit - INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME, 0, INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME, 0.9, 0)
		RuiSetFloat( stackingIncomingDamageTextRui, "msgAlpha", alpha )
		switch (GetLocalViewPlayer().GetPlayerModHealth())
		{
			case 12500:
			case 9000:
				// 5 segments - 1500 per segment for BT, 2500 for legion/scorch
				RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS + <0.035, 0, 0> )
				break;
			case 10000:
				RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS )
				break;
			case 7500:
				RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS - <0.035, 0, 0> )
				break;
		}

		WaitFrame()
	}
}

void function PlayerDidDamageText( float damage, vector damagePosition, entity victim, bool isCrit, bool isIneffective )
{
	if (!isIneffective) {
		if (Time() - lastOutgoingDamageTextHitTime > 0.8)
		{
			print("bep")
			ResetStackingDamageFlyoutText( damage, isCrit, victim )
		}
		else 
		{
			AddDamageToStackingDamageFlyoutText( damage, isCrit, victim )
		}
		thread AddSmallDamageTextFlyout( damage, isCrit )

		lastOutgoingDamageTextHitTime = Time()

	}
    
}

void function OnJumpPressed(entity player)
{
	player.ClientCommand("+moveright")
	thread WaitFrameThenUnjump(player)
}

void function WaitFrameThenUnjump(entity player)
{
	WaitFrame()
	player.ClientCommand("-moveright")
}