global function ClWeaponStatus_Init
global function ClWeaponStatus_SetOffhandVisible
global function ClWeaponStatus_SetWeaponVisible
global function ClWeaponStatus_GetWeaponHudRui
global function ClWeaponStatus_RefreshWeaponStatus
global function UpdateOffhandUIPrefab
global function GetOffhandUI
global function TestRuiTopo
global function GetAccentColor

const RUI_TEXT_CENTER = $"ui/cockpit_console_text_center.rpak"
const RUI_TEXT_LEFT = $"ui/cockpit_console_text_top_left.rpak"
const RUI_TEXT_RIGHT = $"ui/cockpit_console_text_top_right.rpak"

global struct TopoData {
    vector position = Vector( 0.0, 0.0, 0.0 )
    vector size = Vector( 0.0, 0.0, 0.0 )
    vector angles = Vector( 0.0, 0.0, 0.0 )
    var topo
}

global struct BarTopoData {
    vector position = Vector( 0.0, 0.0, 0.0 )
    vector size = Vector( 0.0, 0.0, 0.0 )
    vector angles = Vector( 0.0, 0.0, 0.0 )
    int segments = 1
	float segmentDistance
    array<var> imageRuis
    array<TopoData> topoData
    int direction
	float fill
	bool isFlat = false
}

global enum eDirection
{
    down,
    up,
    left,
    right
}

struct
{
	bool isVisible
	array< void functionref( float ) > updateCallbacks
	array< void functionref() > startCallbacks

	table<string, var> ruis
	table< string, table<string, BarTopoData> > offhandUIPrefabs
	table<string, BarTopoData> bars
	entity selectedWeapon = null
	float curHealthAlpha = 0.9
	float curShieldAlpha = 0.0
} file

struct {
	vector healthPos = Vector(0.0, -0.2875, 0.0)
    vector shieldPos = Vector(0.0, -0.34, 0.0)

    string abilityText = "%.1f"

} settings

void function ClWeaponStatus_Init()
{
	if (IsLobby())
		return
	AddCallback_OnClientScriptInit( ClWeaponStatus_AddClient )
	AddCallback_OnSelectedWeaponChanged( OnSelectedWeaponChanged )

	AddCallback_OnPlayerLifeStateChanged( OnLifeStateChanged )
	AddCallback_PlayerClassChanged( OnPlayerClassChanged )

	AddCallback_KillReplayEnded( OnKillReplayEnded )
}

void function AddStartCallback( void functionref() callback )
{
	file.startCallbacks.append(callback)
}

void function AddUpdateCallback( void functionref( float ) callback )
{
	file.updateCallbacks.append(callback)
}

void function ClWeaponStatus_RefreshWeaponStatus( entity player )
{

}

var function ClWeaponStatus_GetWeaponHudRui( entity player, entity weapon )
{
	return null
}

void function ClWeaponStatus_AddClient( entity player )
{
	AddStartCallback( InitAmmoCounterRui )
	AddStartCallback( InitHolsteredWeapons )
	AddStartCallback( InitOffhandRuis )
	AddStartCallback( InitHealthRuis )
	AddUpdateCallback( Test_Update )
	Start()
	thread UpdateThread()
}

// BASIC THREADS

void function Start()
{
	foreach(void functionref() f in file.startCallbacks){
		f()
	}
}

void function UpdateThread()
{
	float time = Time()
	while (true)
	{
		time = Time()
		WaitFrame()
		if (IsWatchingKillReplay()) continue
		foreach(void functionref(float) f in file.updateCallbacks){
			f(Time() - time)
		}
		//while (IsWatchingKillReplay()) { WaitFrame(); }
	}
}

// DAMAGE TAKEN EVENT

// HEALTH AND SHIELD

void function InitHealthRuis()
{
	{
		var rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoTitanCockpitHud, RUI_DRAW_COCKPIT, 5 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 1 )
		RuiSetFloat2( rui, "msgPos", settings.healthPos )
		RuiSetFloat3( rui, "msgColor", GetAccentColor() )
		RuiSetString( rui, "msgText", "10000" )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.0 )
		file.ruis["health"] <- rui
	}
	{
		var rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoTitanCockpitHud, RUI_DRAW_COCKPIT, 5 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 1 )
		RuiSetFloat2( rui, "msgPos", settings.shieldPos )
		RuiSetFloat3( rui, "msgColor", <0.33, 0.6, 1> )
		RuiSetString( rui, "msgText", "2500" )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.0 )
		file.ruis["shield"] <- rui
	}

	{
		var rui = RuiCreate( RUI_TEXT_LEFT, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 5 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <0.65, 0.74, 0> )
		RuiSetFloat3( rui, "msgColor", GetAccentColor() )
		RuiSetString( rui, "msgText", "2500" )
		RuiSetFloat( rui, "msgFontSize", 60.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.0 )
		file.ruis["healthText"] <- rui
	}
	float xSize = GetConVarFloat2( "comp_hud_pilot_healthbar_size" ).x
	float ySize = GetConVarFloat2( "comp_hud_pilot_healthbar_size" ).y
	float vertMultiplier = COCKPIT_RUI_WIDTH / COCKPIT_RUI_HEIGHT
	BarTopoData data = BasicImageBar_CreateRuiTopo( <0,0,0>, <0.25, 0.4, 0>, (xSize + 0.005), (ySize + 0.005) * vertMultiplier )
	//BasicImageBar_UpdateSegmentCount( data, 5, 0.1 )
	file.bars["healthBG"] <- data
	data = BasicImageBar_CreateRuiTopo( <0,0,0>, <0.25, 0.4, 0>, xSize, ySize * vertMultiplier )
	//BasicImageBar_UpdateSegmentCount( data, , 0.1 )
	file.bars["health"] <- data
	AddUpdateCallback( UpdateHealthDisplays )
}

float lastShieldStateChangeTime = -5.0;
int lastShieldHealth = 0;
void function UpdateHealthDisplays( float deltaTime )
{
	entity player = GetLocalViewPlayer()

	if (!IsValid(player) || !player.IsPlayer()) return
	if (!IsAlive(player))
	{
		RuiSetFloat( file.ruis["health"], "msgAlpha", 0.0 )
		RuiSetFloat( file.ruis["shield"], "msgAlpha", 0.0 )
	}
	else
	{
		int shieldHealth = 0;
		if (player.GetTitanSoul() != null) shieldHealth = int( player.GetTitanSoul().GetShieldHealth() * CalculateDivisorForEntity(player) )
		RuiSetFloat3( file.ruis["health"], "msgColor", GetAccentColor() )
		RuiSetFloat( file.ruis["health"], "msgAlpha", (player.IsTitan() && GetConVarBool("comp_hud_healthbar")) ? 0.9 : 0.0 )
		RuiSetFloat2( file.ruis["health"], "msgPos", settings.healthPos + (GetConVarBool("comp_hud_healthbar_overlap") ? <0.0, -0.0225, 0.0> : <0,0,0>))
		if (shieldHealth > 0 && GetConVarBool("comp_hud_healthbar"))
		{
			if (lastShieldHealth <= 0)
			{
				lastShieldHealth = 1;
				lastShieldStateChangeTime = Time()
			}

			RuiSetFloat( file.ruis["shield"], "msgAlpha", 0.9 )
		}
		else
		{
			if (lastShieldHealth > 0)
			{
				lastShieldHealth = 0;
				lastShieldStateChangeTime = Time()
			}

			RuiSetFloat( file.ruis["shield"], "msgAlpha", 0.0 )
		}
		RuiSetString(file.ruis["shield"], "msgText", shieldHealth.tostring())
	}

	RuiSetString(file.ruis["health"], "msgText", int(player.GetHealth() * CalculateDivisorForEntity(player)).tostring())

	////////////////
	// BAR UPDATE //
	////////////////

	if (player.IsTitan() || !GetConVarBool("comp_hud_pilot_healthbar"))
	{
		BasicImageBar_SetFillFrac( file.bars["health"], 0.0 )
		BasicImageBar_SetFillFrac( file.bars["healthBG"], 0.0 )
		RuiSetString( file.ruis["healthText"], "msgText", "" )
	}
	else
	{
		float xSize = GetConVarFloat2( "comp_hud_pilot_healthbar_size" ).x
		float ySize = GetConVarFloat2( "comp_hud_pilot_healthbar_size" ).y
		float vertMultiplier = COCKPIT_RUI_WIDTH / COCKPIT_RUI_HEIGHT
		BasicImageBar_UpdatePosition( file.bars["healthBG"], GetConVarFloat2( "comp_hud_pilot_healthbar_pos"),
			(xSize + 0.005), (ySize + 0.005) * vertMultiplier )
		//BasicImageBar_UpdateSegmentCount( data, 5, 0.1 )
		BasicImageBar_UpdatePosition( file.bars["health"], GetConVarFloat2( "comp_hud_pilot_healthbar_pos"),
			xSize, ySize * vertMultiplier )
		RuiSetFloat2( file.ruis["healthText"], "msgPos", <0.5, 0.44, 0> + GetConVarFloat2("comp_hud_pilot_healthbar_pos") + <xSize * -0.5, -ySize, 0> )
		//BasicImageBar_UpdateSegmentCount( data, , 0.1 )

		BasicImageBar_SetFillFrac( file.bars["health"], float(player.GetHealth()) / float(player.GetMaxHealth()) )
		BasicImageBar_SetFillFrac( file.bars["healthBG"], 1.0 )
		RuiSetString( file.ruis["healthText"], "msgText", player.GetHealth().tostring() )
	}

	foreach (var rui in file.bars["health"].imageRuis)
	{
		RuiSetFloat3( rui, "basicImageColor", GetAccentColor() )
	}
	foreach (var rui in file.bars["healthBG"].imageRuis)
	{
		RuiSetFloat3( rui, "basicImageColor", <0,0,0> )
		RuiSetFloat(rui, "basicImageAlpha", 0.5)
	}
}

float function LerpFloat( float a, float b, float t)
{
	t = clamp(t, 0.0, 1.0)
	return ((b - a) * t) + a
}

// MAIN AMMO COUNTER

void function InitAmmoCounterRui()
{
	var rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
	RuiSetInt( rui, "maxLines", 1 )
	RuiSetInt( rui, "lineNum", 0 )
	RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_ammo_pos") )
	RuiSetString( rui, "msgText", "56" )
	RuiSetFloat( rui, "msgFontSize", 96.0 )
	RuiSetFloat( rui, "msgAlpha", 0.9 )
	RuiSetFloat( rui, "thicken", 0.0 )
	file.ruis["ammo"] <- rui
	AddUpdateCallback( UpdateAmmoCounter )

	// "AMMO" below the counter
	rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
	RuiSetInt( rui, "maxLines", 1 )
	RuiSetInt( rui, "lineNum", 0 )
	RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_ammo_pos") + <0.0, 0.1, 0.0> )
	RuiSetString( rui, "msgText", "AMMO" )
	RuiSetFloat( rui, "msgFontSize", 48.0 )
	RuiSetFloat( rui, "msgAlpha", 0.9 )
	RuiSetFloat( rui, "thicken", 0.0 )

	file.ruis["ammoDisplay"] <- rui

	rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
	RuiSetInt( rui, "maxLines", 1 )
	RuiSetInt( rui, "lineNum", 0 )
	RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_ammo_pos") + <0.025, 0.025, 0.0> )
	RuiSetString( rui, "msgText", "240" )
	RuiSetFloat( rui, "msgFontSize", 48.0 )
	RuiSetFloat( rui, "msgAlpha", 0.9 )
	RuiSetFloat( rui, "thicken", -0.5 )

	file.ruis["stockpile"] <- rui
}

void function UpdateAmmoCounter( float deltaTime )
{
	entity player = GetLocalViewPlayer()

	if (!IsValid(player) || !player.IsPlayer() || !IsAlive( player )) return

	entity weapon = file.selectedWeapon

	if (!IsValid(weapon)) return

	// do not update ammo counter when holding offhand weapon
	foreach(entity w in player.GetOffhandWeapons()){
		if (weapon == w) return
	}

	RuiSetString(file.ruis["ammo"], "msgText", GetAmmoString(weapon))

	// REAL-TIME SETTING - COLOR
	RuiSetFloat3(file.ruis["ammo"], "msgColor",
		GetAccentColor(weapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))
	RuiSetFloat3(file.ruis["ammoDisplay"], "msgColor",
		GetAccentColor(weapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))
	RuiSetFloat3(file.ruis["stockpile"], "msgColor",
		GetAccentColor(weapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))

	// REAL-TIME SETTING - POSITION
	float scale = GetConVarFloat( "comp_hud_ammo_scale" )
	RuiSetFloat2( file.ruis["ammo"], "msgPos", GetConVarFloat2("comp_hud_ammo_pos") )
	RuiSetFloat2( file.ruis["ammoDisplay"], "msgPos", GetConVarFloat2("comp_hud_ammo_pos") + <0.0, 0.06, 0.0> * scale )
	RuiSetFloat2( file.ruis["stockpile"], "msgPos", GetConVarFloat2("comp_hud_ammo_pos") + <0.025, 0.015, 0.0> * scale )

	RuiSetFloat( file.ruis["ammo"], "msgFontSize", 96.0 * scale )
	RuiSetFloat( file.ruis["ammoDisplay"], "msgFontSize", 48.0 * scale )
	RuiSetFloat( file.ruis["stockpile"], "msgFontSize", 48.0 * scale )
}

// HOLSTERED WEAPONS

void function InitHolsteredWeapons()
{
	{
		var rui = RuiCreate( RUI_TEXT_LEFT, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 1 )
		RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_holstered_weapons_pos") - <0.0, 0.025, 0.0> )
		//RuiSetString( rui, "msgText", "P2016 - 13" )
		RuiSetFloat3( rui, "msgColor", GetAccentColor() )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", -0.25 )
		file.ruis["secondary"] <- rui
	}

	{
		var rui = RuiCreate( RUI_TEXT_LEFT, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 1 )
		RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_holstered_weapons_pos") + <0.0, 0.025, 0.0> )
		//RuiSetString( rui, "msgText", "CHARGE RIFLE - 22" )
		RuiSetFloat3( rui, "msgColor", GetAccentColor() )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", -0.25 )
		file.ruis["weapon3"] <- rui
	}

	AddUpdateCallback( UpdateHolsteredWeapons )
}

void function UpdateHolsteredWeapons( float deltaTime )
{
	entity weapon = file.selectedWeapon
	if (!IsValid(weapon)) return
	entity player = weapon.GetOwner()
	if (!IsValid(player) || !player.IsPlayer()) return
	if (player != GetLocalClientPlayer()) return
	foreach(entity w in player.GetOffhandWeapons()){
		if (weapon == w) return
	}

	int selectedSlot = 0;

	foreach(entity w in player.GetMainWeapons()){
		if (weapon == w) break
		selectedSlot++
	}

	{
		var rui = file.ruis["secondary"]
		if (player.GetMainWeapons().len() > 1) {
			switch (selectedSlot)
			{
				// display secondary
				case 0:
					entity displayWeapon = player.GetMainWeapons()[1]
					RuiSetFloat3(rui, "msgColor",
						GetAccentColor(displayWeapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))
					RuiSetString(rui, "msgText", (GetConVarBool("hud_setting_showButtonHints") ? "%weaponSelectPrimary1% " : "") + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "`2" : "") + displayWeapon.GetWeaponSettingString( eWeaponVar.shortprintname ) + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "" : " - " + GetAmmoString(displayWeapon)))
					break
				// display primary
				default:
					entity displayWeapon = player.GetMainWeapons()[0]
					RuiSetFloat3(rui, "msgColor",
						GetAccentColor(displayWeapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))
					RuiSetString(rui, "msgText", (GetConVarBool("hud_setting_showButtonHints") ? "%weaponSelectPrimary0% " : "") + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "`2" : "") + displayWeapon.GetWeaponSettingString( eWeaponVar.shortprintname ) + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "" : " - " + GetAmmoString(displayWeapon)))
					break

			}
			RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_holstered_weapons_pos") - <0.0, 0.025, 0.0> )
		}
		else
		{
			RuiSetString(rui, "msgText", "")
		}
	}
	{
		var rui = file.ruis["weapon3"]
		if (player.GetMainWeapons().len() > 2) {
			switch (selectedSlot)
			{
				// display secondary
				case 2:
					entity displayWeapon = player.GetMainWeapons()[1]
					RuiSetFloat3(rui, "msgColor",
						GetAccentColor(displayWeapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))
					RuiSetString(rui, "msgText", (GetConVarBool("hud_setting_showButtonHints") ? "%weaponSelectPrimary1% " : "") + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "`2" : "") + displayWeapon.GetWeaponSettingString( eWeaponVar.shortprintname ) + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "" : " - " + GetAmmoString(displayWeapon)))
					break
				// display anti-titan
				default:
					entity displayWeapon = player.GetMainWeapons()[2]
					RuiSetFloat3(rui, "msgColor",
						GetAccentColor(displayWeapon.GetWeaponSettingBool( eWeaponVar.is_burn_mod )))
					RuiSetString(rui, "msgText", (GetConVarBool("hud_setting_showButtonHints") ? "%weaponSelectPrimary2% " : "") + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "`2" : "") + displayWeapon.GetWeaponSettingString( eWeaponVar.shortprintname ) + (displayWeapon.GetReloadMilestoneIndex() != 0 ? "" : " - " + GetAmmoString(displayWeapon)))
					break

			}
			RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_holstered_weapons_pos") + <0.0, 0.025, 0.0> )
		}
		else
		{
			RuiSetString(rui, "msgText", "")
		}
	}
}

vector function GetAccentColor(bool boost = false)
{
	return (boost ? GetConVarFloat3("comp_hud_boost_text_color") / 255.0 : GetConVarFloat3("comp_hud_accent_color") / 255.0)
}

void function OnSelectedWeaponChanged( entity selectedWeapon )
{
	foreach(entity w in GetLocalViewPlayer().GetOffhandWeapons()){
		if (selectedWeapon == w) return
	}
	file.selectedWeapon = selectedWeapon
}

// UTILITY

string function GetAmmoString( entity weapon )
{
	string result
	RuiSetFloat(file.ruis["ammoDisplay"], "msgAlpha", GetConVarFloat( "comp_hud_ammo_label" ) )
	if (!weapon.GetWeaponSettingBool( eWeaponVar.ammo_no_remove_from_stockpile ))
	{
		if (weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size ) <= 1)
		{
			if (file.selectedWeapon == weapon) RuiSetFloat(file.ruis["stockpile"], "msgAlpha", 0.0)
			return (weapon.GetWeaponPrimaryAmmoCount() + weapon.GetWeaponPrimaryClipCount()).tostring()
		}
		if (file.selectedWeapon == weapon) {
			RuiSetString(file.ruis["ammoDisplay"], "msgText", "AMMO")
			RuiSetFloat(file.ruis["stockpile"], "msgAlpha", 0.9)
			RuiSetString(file.ruis["stockpile"], "msgText", weapon.GetWeaponPrimaryAmmoCount().tostring())
		}
		else return weapon.GetWeaponPrimaryClipCount().tostring() + "|`1" + weapon.GetWeaponPrimaryAmmoCount().tostring()

		result = weapon.GetWeaponPrimaryClipCount().tostring()
		int digits = result.len()

		result += "|"

		for (int i = 0; i < digits; i++)
		{
			result += " "
		}

		return result;
	}
	else
	{
		if (file.selectedWeapon == weapon) RuiSetFloat(file.ruis["stockpile"], "msgAlpha", 0.0)
		if (weapon.GetWeaponSettingFloat(eWeaponVar.regen_ammo_refill_rate) > 0.0)
		{
			float ammoFrac = float( weapon.GetWeaponPrimaryClipCount() ) / float( weapon.GetWeaponPrimaryClipCountMax() )

			if (file.selectedWeapon == weapon) RuiSetString(file.ruis["ammoDisplay"], "msgText", "HEAT")

			return int(RoundToNearestInt(100.0 - (ammoFrac * 100.0))).tostring() + "%"
		}
		else if (file.selectedWeapon == weapon) RuiSetString(file.ruis["ammoDisplay"], "msgText", "AMMO")
	}
	return weapon.GetWeaponPrimaryClipCount().tostring()
}

// could be useful, but we are already checking for weapon changed, so?
void function OnPlayerClassChanged( entity player )
{

}

// destroy all ruis when dead after doing life checks
void function OnLifeStateChanged( entity player, int oldLifeState, int newLifeState )
{

}

void function InitOffhandRuis()
{
	// TEXTS
	{
		var rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_ordnance_position") + GetConVarFloat2("comp_hud_ability_cooldown_pos_offset") )
		RuiSetString( rui, "msgText", "5" )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", -0.25 )
		file.ruis["offhand0"] <- rui
	}

	{
		var rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_tactical_position") + GetConVarFloat2("comp_hud_ability_cooldown_pos_offset") )
		RuiSetString( rui, "msgText", "3" )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", -0.25 )
		file.ruis["offhand1"] <- rui
	}

	{
		var rui = RuiCreate( RUI_TEXT_CENTER, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", GetConVarFloat2("comp_hud_utility_position") + GetConVarFloat2("comp_hud_ability_cooldown_pos_offset") )
		RuiSetString( rui, "msgText", "0.9" )
		RuiSetFloat( rui, "msgFontSize", 32.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", -0.25 )
		file.ruis["offhand2"] <- rui
	}

	{
		var rui = RuiCreate( RUI_TEXT_LEFT, clGlobal.topoCockpitHud, RUI_DRAW_COCKPIT, 0 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 1 )
		RuiSetFloat2( rui, "msgPos", <0.01, 0.4, 0.0> )
		RuiSetFloat3( rui, "msgColor", GetAccentColor(true) )
		RuiSetString( rui, "msgText", "BOOST" )
		RuiSetFloat( rui, "msgFontSize", 48.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", -0.25 )
		file.ruis["offhand4"] <- rui
	}

	// BARS
	{
		table<string, BarTopoData> prefab = BasicImageBar_CreateOffhandUI(GetConVarFloat2("comp_hud_ordnance_position"))
		file.offhandUIPrefabs["offhand0"] <- prefab
		thread BasicImageBar_UpdateOffhandUI( prefab, "comp_hud_ordnance_position", 0 )
	}

	{
		table<string, BarTopoData> prefab = BasicImageBar_CreateOffhandUI(GetConVarFloat2("comp_hud_tactical_position"))
		file.offhandUIPrefabs["offhand1"] <- prefab
		thread BasicImageBar_UpdateOffhandUI( prefab, "comp_hud_tactical_position", 1 )
	}

	{
		table<string, BarTopoData> prefab = BasicImageBar_CreateOffhandUI(GetConVarFloat2("comp_hud_utility_position"))
		file.offhandUIPrefabs["offhand2"] <- prefab
		thread BasicImageBar_UpdateOffhandUI( prefab, "comp_hud_utility_position", 2 )
	}
	// boost prefab is different
	#if MP
	{
		vector position = GetConVarFloat2("comp_hud_boost_position")
		float scale = GetConVarFloat("comp_hud_ability_ui_scale")
		table<string, BarTopoData> result
		float xScalar = 0.06
		float yScalar = 0.06
		result["bg"] <- BasicImageBar_CreateRuiTopo( <0, 0, 0>, position, xScalar * scale, yScalar * scale )

		RuiSetFloat3( result["bg"].imageRuis[0], "basicImageColor", < 0,0,0 >)
		RuiSetFloat( result["bg"].imageRuis[0], "basicImageAlpha", GetConVarFloat("comp_hud_ability_bg_alpha"))

		if (GetConVarBool("comp_hud_vertical_side_bar"))
		{
			result["bar"] <- BasicImageBar_CreateRuiTopo( <0, 0, 0>, position - <0.021 * scale, 0.0, 0>, (xScalar * GetConVarFloat("comp_hud_ability_bar_thickness")) / 1.7665 * scale, 0.09 * scale, eDirection.up )
			BasicImageBar_UpdateSegmentCount( result["bar"], 2, 0.05 )
		}
		else
		{
			result["bar"] <- BasicImageBar_CreateRuiTopo( <0, 0, 0>, position - <0.0, 0.0425 * scale, 0>, 0.045 * scale, (xScalar * GetConVarFloat("comp_hud_ability_bar_thickness")) * scale, eDirection.right )
			BasicImageBar_UpdateSegmentCount( result["bar"], 2, 0.05 )
		}

		result["icon"] <- BasicImageBar_CreateRuiTopo( <0, 0, 0>, position, xScalar * scale, (xScalar * GetConVarFloat("comp_hud_ability_bar_thickness")) * scale, eDirection.right )

		RuiSetFloat( result["icon"].imageRuis[0], "basicImageAlpha", 2)
		RuiSetFloat3( result["icon"].imageRuis[0], "basicImageColor", <1,1,1>)

		foreach(var rui in result["bar"].imageRuis)
		{
			RuiSetFloat3(rui, "basicImageColor", GetAccentColor() )
		}

		file.offhandUIPrefabs["offhand4"] <- result
		thread BasicImageBar_UpdateOffhandUI( result, "comp_hud_boost_position", 4 )
	}
	#endif


	AddUpdateCallback( UpdateOffhandRuis )
}

bool isWR = false
int WRFrames = 0
float startWRSpeed = 0.0
float endWRSpeed = 0.0
//array<float> WRSpeeds = []
float lastSpeed = 0.0
int index = 0
void function UpdateOffhandRuis( float deltaTime )
{
	entity player = GetLocalViewPlayer()
	if (!IsValid(player) || !player.IsPlayer()) return
	for (int i = 0; i < 3; i++)
	{
		var rui = file.ruis["offhand" + i]
		table<string, BarTopoData> bar = file.offhandUIPrefabs["offhand" + i]


		if (!IsValid(player.GetOffhandWeapon(i)))
		{
			foreach ( BarTopoData data in bar )
			{
				BasicImageBar_SetFillFrac( data, 0.0 )
			}
			RuiSetString(rui, "msgText", "")
		}
		else {
			foreach ( string key, BarTopoData data in bar )
			{
				if (key == "bar") continue
				BasicImageBar_SetFillFrac( data, 1.0 )
			}
			string posConVar = "comp_hud_ordnance_position"
			switch (i)
			{
				case 1:
					posConVar = "comp_hud_tactical_position"
					break
				case 2:
					posConVar = "comp_hud_utility_position"
					break
			}
			RuiSetFloat2( rui, "msgPos", GetConVarFloat2(posConVar) + GetConVarFloat2("comp_hud_ability_cooldown_pos_offset") )

			UpdateOffhandRui(rui, bar, player, player.GetOffhandWeapon(i))
		}
	}
	#if MP
	entity boost = player.GetOffhandWeapon(4)

	int segments = 0

	if (IsValid(boost))
	{
		if ( player.IsTitan() )
		{
			segments = player.GetWeaponAmmoStockpile( boost )
			segments += boost.GetWeaponPrimaryClipCount()
		}
		else
		{
			//RuiSetInt( rui, "segments", PlayerInventory_ItemCount( player ) )
			try
			{
				segments = player.GetPlayerNetInt("itemInventoryCount")
				if (segments > 5) segments = 5 // cap it at 5. I don't even care if you have more than 5 items, use them.
			}
			catch (ex)
			{
				segments = 1
			}
		}
	}
	if (segments != 0)
	{
		BasicImageBar_UpdateSegmentCount( file.offhandUIPrefabs["offhand4"]["bar"], segments, 0.05 )

		RuiSetImage( file.offhandUIPrefabs["offhand4"]["icon"].imageRuis[0], "basicImage", GetWeaponInfoFileKeyFieldAsset_WithMods_Global( boost.GetWeaponClassName(), boost.GetMods(), "hud_icon" ) )

		foreach ( var image in file.offhandUIPrefabs["offhand4"]["bar"].imageRuis )
		{
			RuiSetFloat3( image, "basicImageColor", GetAccentColor(true) )
		}

		BasicImageBar_SetFillFrac( file.offhandUIPrefabs["offhand4"]["bar"], 1.0 )
		BasicImageBar_SetFillFrac( file.offhandUIPrefabs["offhand4"]["bg"], 1.0 )
	}
	else
	{
		BasicImageBar_UpdateSegmentCount( file.offhandUIPrefabs["offhand4"]["bar"], 1, 0.05 )
		BasicImageBar_SetFillFrac( file.offhandUIPrefabs["offhand4"]["bar"], 0.0 )
		BasicImageBar_SetFillFrac( file.offhandUIPrefabs["offhand4"]["bg"], 0.0 )
	}
	#endif
	RuiSetFloat3( file.ruis["offhand4"], "msgColor", GetAccentColor(true) )
	if (GetConVarBool("comp_hud_wpd") && !player.IsTitan())
	{
		// 1 feet = 12 game units
		// 243 game units / second = 20.25 feet / second
		// 1 foot / second = 1.097 km / h
		RuiSetString(file.ruis["offhand4"], "msgText", format( "%.1f km/h",  Length( Vector( player.GetVelocity().x, player.GetVelocity().y, 0 ) / 10.9444 ) ) )
		RuiSetFloat(file.ruis["offhand4"], "msgFontSize", GetConVarFloat("comp_hud_wpd_size"))
		RuiSetFloat2(file.ruis["offhand4"], "msgPos", GetConVarFloat2("comp_hud_wpd_pos"))
		if (player.IsWallRunning())
		{
			if (!isWR)
			{
				WRFrames = 0
				isWR = true
				startWRSpeed = lastSpeed
			}
			//player.ClientCommand("+jump")
			WRFrames++
			RuiSetString(file.ruis["offhand4"], "msgText", "frames: " + WRFrames + "\n" +
			format( "%.1f km/h", Length( Vector( player.GetVelocity().x, player.GetVelocity().y, 0 ) / 10.9444 ) ) )
		}
		else {
			//player.ClientCommand("-jump")
			if (isWR) endWRSpeed = Length( Vector( player.GetVelocity().x, player.GetVelocity().y, 0 ) )
			isWR = false
			RuiSetString(file.ruis["offhand4"], "msgText", "frames: " + WRFrames + "\n" +
			format( "%.1f km/h (%+.1f)", Length( Vector( player.GetVelocity().x, player.GetVelocity().y, 0 ) / 10.9444 ), (endWRSpeed - startWRSpeed) / 10.9444 ) )

			lastSpeed = Length( Vector( player.GetVelocity().x, player.GetVelocity().y, 0 ) )
		}
		//if (GetConVarBool("comp_hud_ability_bar_empty_color"))
		//{
		//	SetConVarBool("comp_hud_ability_bar_empty_color", false)
		//	
		//}
		return
	}

	RuiSetString(file.ruis["offhand4"], "msgText", "")
}

void function OnKillReplayEnded()
{

}

void function UpdateOffhandRui( var rui, table<string, BarTopoData> bar, entity player, entity weapon )
{
	float altCooldown = 0.0
	float timeUntilNextCharge = 0.0
	int maxCharges = 1
	float minFracToUse = 1
	bool doNotSetText = false
	float ammoFrac = 0
	if (weapon.IsChargeWeapon()) ammoFrac = 1 - weapon.GetWeaponChargeFraction()
	if (weapon.GetWeaponPrimaryClipCountMax() > 0) ammoFrac = float(weapon.GetWeaponPrimaryClipCount()) / weapon.GetWeaponPrimaryClipCountMax()
	RuiSetImage( bar["icon"].imageRuis[0], "basicImage", GetWeaponInfoFileKeyFieldAsset_WithMods_Global( weapon.GetWeaponClassName(), weapon.GetMods(), "hud_icon" ) )
	switch ( weapon.GetWeaponInfoFileKeyField( "cooldown_type" ) )
	{
		case "ammo_swordblock":
			ammoFrac = 0
			timeUntilNextCharge = 0
			altCooldown = 0
			break

		case "shared_energy":
			int curCost = weapon.GetWeaponCurrentEnergyCost() // 350
			float energy = float( player.GetSharedEnergyCount() )
			float maxEnergy = float( player.GetSharedEnergyTotal() ) // 1000
			float energyRegenRate = player.GetSharedEnergyRegenRate()

			maxCharges = int( maxEnergy ) / curCost
			minFracToUse = float( curCost ) / maxEnergy
			int curCharges = int( energy ) / curCost
			int targetAmmo = (curCharges + 1) * curCost
			timeUntilNextCharge = (targetAmmo - energy) / energyRegenRate
			ammoFrac = (energy / curCost / maxCharges)

			// Ability - 2/2 | 2.5s
			break

		case "shared_energy_drain":
			float energy = float( player.GetSharedEnergyCount() )
			float maxEnergy = float( player.GetSharedEnergyTotal() ) // 1000
			float energyRegenRate = player.GetSharedEnergyRegenRate()
			maxCharges = 1

			minFracToUse = 0.1
			timeUntilNextCharge = (maxEnergy - energy) / energyRegenRate
			ammoFrac = (energy / maxEnergy)


			if (player.GetActiveWeapon() == weapon)
			{
				timeUntilNextCharge = (energy / maxEnergy) * weapon.GetWeaponSettingFloat( eWeaponVar.charge_time )
			}
			break

		case "vortex_drain":
			// display percentage/cooldown
			break

		case "charged_shot":
			float chargeCooldownTime = weapon.GetWeaponSettingFloat( eWeaponVar.charge_cooldown_time )
			timeUntilNextCharge = (1 - ammoFrac) * chargeCooldownTime
			ammoFrac = 1 - weapon.GetWeaponChargeFraction()
			switch (weapon.GetWeaponClassName())
			{
				case "mp_titanweapon_shoulder_rockets":
					minFracToUse = 0.2
					break;
				case "mp_titanweapon_vortex_shield":
					minFracToUse = 0.1
					break;
				default:
					minFracToUse = 1
			}
			break

		case "grapple":
			int ammoClipSize = 100
			float ammoMinToFire = weapon.GetWeaponSettingFloat( eWeaponVar.grapple_power_required )
			float grapplePower = player.GetSuitGrapplePower()
			float grappleRegenRate = 3.0

			if (player.HasPassive( ePassives.PAS_POWER_CELL ))
			{
				// AAAAAAAAAAAA
				grappleRegenRate *= 1.35
			}

			try
			{
				maxCharges = ammoClipSize / int(ammoMinToFire)
			}
			catch (ex) { maxCharges = 1 }
			minFracToUse = ammoMinToFire / ammoClipSize
			if (ammoMinToFire > 0) maxCharges = ammoClipSize / int( ammoMinToFire )
			int curCharges = 0;
			if (ammoMinToFire > 0) curCharges = int( grapplePower ) / int( ammoMinToFire )
			int targetAmmo = (curCharges + 1) * int( ammoMinToFire )
			timeUntilNextCharge = (targetAmmo - grapplePower) / grappleRegenRate
			if (GameRules_GetGameMode() == "econ")
				timeUntilNextCharge = 0.0
			if (ammoClipSize == grapplePower) timeUntilNextCharge = 0
			ammoFrac = grapplePower / ammoClipSize

			break

		case "ammo_instant":
			int cost = weapon.GetWeaponSettingInt( eWeaponVar.shared_energy_cost )
			if (cost > 0)
			{
				float energy = float( player.GetSharedEnergyCount() )
				if (energy < cost)
				{
					float energyRegenRate = player.GetSharedEnergyRegenRate()
					float timeUntilNextCharge = (cost - energy) / energyRegenRate
					if (timeUntilNextCharge > altCooldown)
						altCooldown = timeUntilNextCharge
				}
			}
		default:
			float refillRate = weapon.GetWeaponSettingFloat( eWeaponVar.regen_ammo_refill_rate )

			float timeUntilNextAttack = weapon.GetNextAttackAllowedTime() - Time()
			if (weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration ) > 0)
			{
				if (timeUntilNextAttack > 1 / weapon.GetWeaponSettingFloat( eWeaponVar.fire_rate ))
				{
					RuiSetFloat3( bar["bg"].imageRuis[0], "basicImageColor", <1, 0.5, 0.0> )
					timeUntilNextCharge = timeUntilNextAttack - 1 / weapon.GetWeaponSettingFloat( eWeaponVar.fire_rate )
					break
				}
			}
			RuiSetFloat3( bar["bg"].imageRuis[0], "basicImageColor", <0, 0, 0> )
			if (timeUntilNextAttack > altCooldown)
			{
				altCooldown = timeUntilNextAttack
			}
			if ( refillRate > 0 || !weapon.IsChargeWeapon())
			{
				//printt( "HUD: ", weapon.GetWeaponClassName(), "using", "refillRate" )
				int ammoClipSize = weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size )
				// returns MP setting despite it being 1
				int ammoMinToFire = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )
				//printt(weapon.GetWeaponSettingString(eWeaponVar.printname), "| max ammo:", ammoClipSize, "min to fire:", ammoMinToFire)

				maxCharges = ammoClipSize / ammoMinToFire
				minFracToUse = float( ammoMinToFire ) / ammoClipSize
				int curCharges = weapon.GetWeaponPrimaryClipCount() / ammoMinToFire
				int targetAmmo = (curCharges + 1) * ammoMinToFire
				if (refillRate > 0)
					timeUntilNextCharge = float(targetAmmo - weapon.GetWeaponPrimaryClipCount()) / refillRate
				else timeUntilNextCharge = 0.0
				if (ammoClipSize == weapon.GetWeaponPrimaryClipCount()) timeUntilNextCharge = 0


			}
			else
			{
				float chargeCooldownTime = weapon.GetWeaponSettingFloat( eWeaponVar.charge_cooldown_time )
				timeUntilNextCharge = (1 - ammoFrac) * chargeCooldownTime
				switch (weapon.GetWeaponClassName())
				{
					case "mp_titanweapon_shoulder_rockets":
						minFracToUse = 0.2
						break;
					case "mp_titanweapon_vortex_shield":
						minFracToUse = 0.1
						break;
					default:
						minFracToUse = 1
				}
			}
			break
	}

	float cooldown = max(timeUntilNextCharge, altCooldown)
	maxCharges = int( max(1, maxCharges) )
	if (maxCharges > 5) maxCharges = 1

	if (maxCharges != bar["bar"].segments)
	{
		BasicImageBar_UpdateSegmentCount(bar["bar"], maxCharges, 0.05)
		//BasicImageBar_UpdateSegmentCount(bar["bgBar"], maxCharges, 0.05)
	}
	foreach (var rui in bar["bgBar"].imageRuis)
	{
		RuiSetFloat3( rui, "basicImageColor", GetAccentColor() * 0.5)
		RuiSetFloat( rui, "basicImageAlpha", 0.1)
	}
	foreach(var rui in bar["bar"].imageRuis)
	{
		RuiSetFloat3(rui, "basicImageColor", GetAccentColor() )
	}
	BasicImageBar_SetFillFrac(bar["bar"], ammoFrac)
	BasicImageBar_SetFillFrac(bar["bgBar"], ammoFrac % 1.0)
	if (ammoFrac < minFracToUse)
	{
		RuiSetFloat3(bar["bgBar"].imageRuis[0], "basicImageColor", GetConVarFloat3("comp_hud_ability_bg_bar_empty_color") / 255.0)
		RuiSetFloat3(bar["bar"].imageRuis[maxCharges - 1], "basicImageColor", GetConVarFloat3("comp_hud_ability_bar_empty_color") / 255.0)
	}
	else {
		RuiSetFloat3(bar["bgBar"].imageRuis[0], "basicImageColor", GetAccentColor() * 0.5)
		RuiSetFloat3(bar["bar"].imageRuis[maxCharges - 1], "basicImageColor", GetAccentColor() )
	}
	RuiSetFloat(bar["bg"].imageRuis[0], "basicImageAlpha", GetConVarFloat("comp_hud_ability_bg_alpha"))

	if (!doNotSetText) RuiSetString(rui, "msgText", format(settings.abilityText, cooldown))



	if (cooldown == 0.0) {
		RuiSetString(rui, "msgText", "")
		RuiSetFloat3(bar["icon"].imageRuis[0], "basicImageColor", <1.5, 1.5, 1.5>)
		RuiSetFloat(bar["icon"].imageRuis[0], "basicImageAlpha", 3)
	}
	else {
		RuiSetFloat3(bar["icon"].imageRuis[0], "basicImageColor", <1, 1, 1>)
		RuiSetFloat(bar["icon"].imageRuis[0], "basicImageAlpha", 3)
	}
}

var function GetPlayerSetting( entity player, string setting )
{
	return GetPlayerSettingsFieldForClassName( player.GetPlayerSettings(), setting )
}

void function ClWeaponStatus_SetOffhandVisible( int offhandIndex, bool newState )
{
	// ALSO A STUB :D
}

void function ClWeaponStatus_SetWeaponVisible( bool newState )
{

}

var function GetRuiForIndex( entity player, int offhandIndex )
{
	return null
}


void function UpdateOffhandUIPrefab( int slot, table<string, BarTopoData> data )
{
	file.offhandUIPrefabs["offhand" + slot] = data
}

table<string, BarTopoData> function GetOffhandUI(int slot)
{
	return file.offhandUIPrefabs["offhand" + slot]
}

void function TestRuiTopo()
{
	var testTopo = CreateWorldTopo(
		<0,100,0>,
		<0, 0, 0>, 160, 90
	)

	var rui = RuiCreate( RUI_TEXT_CENTER, testTopo, RUI_DRAW_COCKPIT, 5 )
	RuiSetInt( rui, "maxLines", 1 )
	RuiSetInt( rui, "lineNum", 0 )
	//RuiSetFloat2( rui, "msgPos", <0,0,0> )
	RuiSetFloat3( rui, "msgColor", GetConVarFloat3("comp_hud_accent_color") )
	RuiSetString( rui, "msgText", "10000" )
	RuiSetFloat( rui, "msgFontSize", 1000.0 )
	RuiSetFloat( rui, "msgAlpha", 0.9 )
	RuiSetFloat( rui, "thicken", 0.0 )

	// no idea if this'll work
	//RuiTopology_SetParent( testTopo, GetLocalViewPlayer().GetViewModelEntity() )
	thread Test_Update(0.0)
}

void function Test_Update(float deltaTime)
{
	if (GetConVarInt("comp_hud_cfg") == 0) return

	SetConVarInt("comp_hud_cfg", 0)


	string result = "\n\n// Here's your layout - tell your friends to paste this in console!\n\n"

	array<string> convars = [
		"////////////",
		"// COLORS //",
		"////////////",
		"",
		"comp_hud_accent_color",
		"comp_hud_boost_text_color",
		"comp_hud_ability_bar_empty_color",
		"comp_hud_ability_bg_alpha",
		"",
		"/////////////",
		"// TOGGLES //",
		"/////////////",
		"// HEALTHBARS",
		"comp_hud_healthbar",
		"comp_hud_pilot_healthbar",
		"// DAMAGE INDICATORS",
		"comp_hud_damage_indicator",
		"comp_hud_incoming_damage_indicator",
		"// MISC.",
		"comp_hud_vertical_side_bar",
		"comp_hud_wpd",
		"",
		"////////////",
		"// LAYOUT //",
		"////////////",
		"",
		"// HEALTHBAR",
		"comp_hud_pilot_healthbar_pos",
		"comp_hud_pilot_healthbar_size",
		"// ABILITY POSITIONS",
		"comp_hud_ordnance_position",
		"comp_hud_tactical_position",
		"comp_hud_utility_position",
		"comp_hud_boost_position",
		"// ABILITY UI SCALING",
		"comp_hud_ability_ui_scale",
		"comp_hud_ability_cooldown_pos_offset",
		"// AMMO",
		"comp_hud_ammo_pos",
		"comp_hud_holstered_weapons_pos",
		"comp_hud_titan_meter_offset",
		"comp_hud_titan_meter_scale",
		"// DAMAGE INDICATORS",
		"comp_hud_damage_indicator_duration",
		"comp_hud_damage_indicator_fade_time",
		"// INCOMING DAMAGE INDICATOR",
		"comp_hud_incoming_damage_indicator_duration",
		"comp_hud_incoming_damage_indicator_fade_time",
		"// WALLKICK PRACTICE DISPLAY",
		"comp_hud_wpd_pos",
		"comp_hud_wpd_size",
	]

	foreach (string convar in convars)
	{
		if (convar.len() > 0 && convar[0] == '/') result += "\n" + convar
		else if (convar == "")
		{
			print(result)
			result = "\n"
		}
		else
		{
			result += "\n" + convar + " " + GetConVarString(convar)
		}
	}

	printt(result)
}