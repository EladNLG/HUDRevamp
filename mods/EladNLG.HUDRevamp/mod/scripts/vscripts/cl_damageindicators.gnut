untyped
global function Cl_DamageIndicator_Init
global function PlayerDidDamageText
global function CalculateDivisorForEntity
// ()
const vector OUTGOING_DAMAGE_TEXT_BEGIN_POS = <0.525, 0.4, 0>
float OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME = 0.5
float OUTGOING_DAMAGE_TEXT_STACKING_DURATION = 1.3
float OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME = 0.8

const vector INCOMING_DAMAGE_TEXT_BEGIN_POS = <0.63, 0.5 - 0.3, 0>
float INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME = 0.5
float INCOMING_DAMAGE_TEXT_STACKING_DURATION = 1.3
float INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME = 0.8

var stackingOutgoingDamageTextRui
var lastOutgoingDamageTextRui
float lastOutgoingDamageTextDamage = 0.0
float accumulatedOutgoingDamage = 0.0
int accumulatedOutgoingHits = 0
float lastOutgoingDamageTextHitTime = 0.0

var stackingIncomingDamageTextRui
float accumulatedIncomingDamage = 0.0
float lastIncomingDamageTextHitTime = 0.0
bool isMenuOpen = false

void function Cl_DamageIndicator_Init()
{
	foreach ( k, v in eDamageSourceId )
	{
		AddLocalPlayerTookDamageCallback( v, PlayerTookDamage )
	}
	#if MP
		//ClPilotSpeedometer_Init()
	#endif
    thread Thread_StackingDamageFlyoutText()
}

void function PlayerTookDamage( float damage, vector pos, int damageType, int damageSourceId, entity attacker )
{
	if (!GetLocalViewPlayer().IsTitan() || !GetConVarBool("comp_hud_incoming_damage_indicator")) return
	if (Time() - lastIncomingDamageTextHitTime > GetConVarFloat("comp_hud_incoming_damage_indicator_duration"))
		accumulatedIncomingDamage = damage
	else accumulatedIncomingDamage += damage
	lastIncomingDamageTextHitTime = Time() // :D
	RuiSetString( stackingIncomingDamageTextRui, "msgText", format( "-%i", int( accumulatedIncomingDamage ) ) )
}

void function ResetStackingDamageFlyoutText(float damage, bool isCrit, entity victim)
{
	accumulatedOutgoingDamage = damage
	if (stackingOutgoingDamageTextRui == null) return
	accumulatedOutgoingHits = 1
	RuiSetString( stackingOutgoingDamageTextRui, "msgText", accumulatedOutgoingDamage.tointeger().tostring() )
	float msgFontSize = GraphCapped( accumulatedOutgoingDamage, victim.IsTitan() ? 500 : 50, victim.IsTitan() ? 10000 : 200, 36, victim.IsTitan() ? 56 : 48 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", msgFontSize)
	RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS - <0, GraphCapped(msgFontSize, 36, 72, 0.0, 0.05), 0> )
	RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
}

void function AddDamageToStackingDamageFlyoutText(float damage, bool isCrit, entity victim)
{
	accumulatedOutgoingDamage += damage
	accumulatedOutgoingHits++
	if (stackingOutgoingDamageTextRui == null) return
	RuiSetString( stackingOutgoingDamageTextRui, "msgText", accumulatedOutgoingDamage.tointeger().tostring() + (accumulatedOutgoingHits > 1 ? "(x" + accumulatedOutgoingHits + ")" : ""))
	float msgFontSize = GraphCapped( accumulatedOutgoingDamage, victim.IsTitan() ? 500 : 50, victim.IsTitan() ? 10000 : 200, 36, victim.IsTitan() ? 56 : 48 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", msgFontSize)
	RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS - <0, GraphCapped(msgFontSize, 36, 72, 0.0, 0.05), 0> )
	RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
}

void function AddSmallDamageTextFlyout(float damage, bool isCrit)
{
	var rui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoCockpitHudPermanent, RUI_DRAW_COCKPIT, 0)
	accumulatedOutgoingHits = 0
	lastOutgoingDamageTextRui = rui
	lastOutgoingDamageTextDamage = damage
	RuiSetInt( rui, "maxLines", 1 );
	RuiSetInt( rui, "lineNum", 1 );
	RuiSetFloat2( rui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS )
	RuiSetString( rui, "msgText",  damage.tointeger().tostring() )
	RuiSetFloat3( rui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
	RuiSetFloat( rui, "msgFontSize", 24.0)
	RuiSetFloat( rui, "msgAlpha", 0.5 )
	RuiSetFloat( rui, "thicken", 0.0 )

	float startTime = Time()
	float OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME = 0.5
	
	while ( Time() - startTime < OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME )
	{
		float alpha = Graph( Time() - startTime, 0, OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME, 0.5, 0 )
		vector posOffset = OUTGOING_DAMAGE_TEXT_BEGIN_POS
		posOffset.y += Graph( Time() - startTime, 0, OUTGOING_DAMAGE_TEXT_SMALL_FADE_TIME, 0, -0.05 )
		RuiSetFloat( rui, "msgAlpha", alpha )
		RuiSetFloat2( rui, "msgPos", posOffset )
		WaitFrame()
	}
	RuiDestroyIfAlive(rui)
}

void function Thread_StackingDamageFlyoutText()
{
	// outgoing damage text
	stackingOutgoingDamageTextRui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoCockpitHudPermanent, RUI_DRAW_COCKPIT, 1)
	RuiSetInt( stackingOutgoingDamageTextRui, "maxLines", 1 );
	RuiSetInt( stackingOutgoingDamageTextRui, "lineNum", 1 );
	RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS )
	RuiSetFloat( stackingOutgoingDamageTextRui, "thicken", 0.0 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", 36.0)
	RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", <0.9, 0.9, 0.9> )
	RuiSetFloat( stackingOutgoingDamageTextRui, "msgAlpha", 0.9 )
	RuiSetFloat( stackingOutgoingDamageTextRui, "thicken", 0.0 )

	// incoming damage text
	stackingIncomingDamageTextRui = RuiCreate( $"ui/cockpit_console_text_top_left.rpak", clGlobal.topoTitanCockpitHud, RUI_DRAW_COCKPIT, 1)
	RuiSetInt( stackingIncomingDamageTextRui, "maxLines", 1 );
	RuiSetInt( stackingIncomingDamageTextRui, "lineNum", 0 );
	RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS )
	RuiSetFloat( stackingIncomingDamageTextRui, "thicken", 0.0 )
	RuiSetFloat( stackingIncomingDamageTextRui, "msgFontSize", 40.0)
	RuiSetFloat3( stackingIncomingDamageTextRui, "msgColor", <0.85, 0.0, 0.0> )
	RuiSetFloat( stackingIncomingDamageTextRui, "msgAlpha", 0.9 )
	RuiSetFloat( stackingIncomingDamageTextRui, "thicken", 0.0 )

	while (true)
	{
		if (IsValid(GetLocalViewPlayer()))
		{
			INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME = GetConVarFloat("comp_hud_incoming_damage_indicator_fade_time")
			INCOMING_DAMAGE_TEXT_STACKING_DURATION = GetConVarFloat("comp_hud_incoming_damage_indicator_duration")
			INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME = INCOMING_DAMAGE_TEXT_STACKING_DURATION - INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME

			OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME = GetConVarFloat("comp_hud_damage_indicator_fade_time")
			OUTGOING_DAMAGE_TEXT_STACKING_DURATION = GetConVarFloat("comp_hud_damage_indicator_duration")
			OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME = OUTGOING_DAMAGE_TEXT_STACKING_DURATION - OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME

			if (OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME < 0)
			{
				OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME = 0
				SetConVarFloat("comp_hud_damage_indicator_duration", OUTGOING_DAMAGE_TEXT_STACKING_DURATION)
			}

			// outgoing damage text update
			float timeSinceLastHit = Time() - lastOutgoingDamageTextHitTime
			float alpha = GraphCapped( timeSinceLastHit - OUTGOING_DAMAGE_TEXT_STACKING_STAY_TIME, 0, OUTGOING_DAMAGE_TEXT_STACKING_FADE_TIME, 0.9, 0)
			RuiSetFloat( stackingOutgoingDamageTextRui, "msgAlpha", alpha )

			if (clGlobal.isMenuOpen && !isMenuOpen)
			{
				isMenuOpen = true
				thread MenuOpen()
			}
			else if (!clGlobal.isMenuOpen) isMenuOpen = false
			// incoming damage text update
			
			timeSinceLastHit = Time() - lastIncomingDamageTextHitTime
			alpha = GraphCapped( timeSinceLastHit - INCOMING_DAMAGE_TEXT_STACKING_STAY_TIME, 0, INCOMING_DAMAGE_TEXT_STACKING_FADE_TIME, 0.9, 0)
			RuiSetFloat( stackingIncomingDamageTextRui, "msgAlpha", alpha )
			switch (GetLocalViewPlayer().GetPlayerModHealth())
			{
				case 12500:
				case 9000:
					// 5 segments - 1500 per segment for BT, 2500 for legion/scorch
					RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS + <0.035, 0, 0> )
					break;
				case 10000:
					RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS )
					break;
				case 7500:
					RuiSetFloat2( stackingIncomingDamageTextRui, "msgPos", INCOMING_DAMAGE_TEXT_BEGIN_POS - <0.035, 0, 0> )
					break;
			}
		}

		WaitFrame()
	}
}

void function MenuOpen()
{
	bool isCrit = false
	while (clGlobal.isMenuOpen)
	{
		accumulatedIncomingDamage = (accumulatedIncomingDamage + 50) % 250
		accumulatedOutgoingDamage = (accumulatedOutgoingDamage + 50) % 250
		if (IsValid(GetLocalClientPlayer()))
		{
			entity player = GetLocalViewPlayer()
			lastIncomingDamageTextHitTime = Time()
			lastOutgoingDamageTextHitTime = Time()
			isCrit = !isCrit
			RuiSetFloat3( stackingOutgoingDamageTextRui, "msgColor", isCrit ? <0.9, 0.55, 0.3> : <0.9, 0.9, 0.9> )
			float msgFontSize = GraphCapped( accumulatedOutgoingDamage, 50, 200, 36, 48 )
			RuiSetFloat( stackingOutgoingDamageTextRui, "msgFontSize", msgFontSize)
			RuiSetFloat2( stackingOutgoingDamageTextRui, "msgPos", OUTGOING_DAMAGE_TEXT_BEGIN_POS - <0, GraphCapped(msgFontSize, 36, 72, 0.0, 0.05), 0> )
			RuiSetString( stackingOutgoingDamageTextRui, "msgText", accumulatedOutgoingDamage.tointeger().tostring() )
			RuiSetString( stackingIncomingDamageTextRui, "msgText", format( "-%i", int( accumulatedIncomingDamage ) ) )
		}
		wait max(GetConVarFloat("comp_hud_damage_indicator_duration"), GetConVarFloat("comp_hud_incoming_damage_indicator_duration"))
	}
	isMenuOpen = false
}

void function PlayerDidDamageText( float damage, vector damagePosition, entity victim, bool isCrit, bool isIneffective )
{
	if (!GetConVarBool("comp_hud_damage_indicator")) return

	float damageScale = 1.0
	damageScale *= CalculateDivisorForEntity(victim)

	if (damage > float(victim.GetHealth() + victim.GetShieldHealth()) * damageScale) damage = float(victim.GetHealth() + victim.GetShieldHealth()) * damageScale
	
	if (Time() - lastOutgoingDamageTextHitTime <= 0.05 && lastOutgoingDamageTextRui != null)
	{
		lastOutgoingDamageTextDamage += damage * damageScale
		try
		{
			RuiSetString( lastOutgoingDamageTextRui, "msgText",  lastOutgoingDamageTextDamage.tointeger().tostring() )
		}
		catch (ex)
		{
			
		}
	}
	else {
		thread AddSmallDamageTextFlyout( damage * damageScale, isCrit )
	}
	
	if (Time() - lastOutgoingDamageTextHitTime > GetConVarFloat("comp_hud_damage_indicator_duration"))
	{
		ResetStackingDamageFlyoutText( damage * damageScale, isCrit, victim )
	}
	else 
	{
		AddDamageToStackingDamageFlyoutText( damage * damageScale, isCrit, victim )
	}

	lastOutgoingDamageTextHitTime = Time()
}

float function CalculateDivisorForEntity( entity npc )
{
	#if !PLAYER_HAS_ROGUELIKE_MOD
		return 1.0
	#else
		if (npc.IsNPC())
		{
			try
			{
				if (typeof( npc.Dev_GetAISettingByKeyField( "Health" ) ) == "string") return 1.0
			}
			catch (ex)
			{
				return 1.0
			}
		} 
		else if (!npc.IsPlayer()) return 1.0

		int baseHealth = expect int (npc.IsNPC() ? npc.Dev_GetAISettingByKeyField( "Health" ) : int(npc.GetPlayerModHealth()))

		//printt("BASE HEALTH:", baseHealth)
		//printt("NEW BASE HEALTH:", baseHealth)
		//printt("HEALTH PER LEVEL:", int(0.3 * baseHealth))
		//printt("ROGUELIKE_DIFFICULTY:", roguelikeDifficulty)
		//printt("HEALTH FROM LEVELS:", int(0.3 * baseHealth) * roguelikeDifficulty)
		int level = npc.GetTeam() == TEAM_IMC ? roguelikeDifficulty : roguelikeLevel
		int newBaseHealth = baseHealth + int(0.3 * baseHealth) * level
		//printt("NEW HEALTH:", newBaseHealth)
		baseHealth = int(max(min( newBaseHealth, 524287 ),10))

		if (newBaseHealth > baseHealth)
		{
			return float(newBaseHealth) / baseHealth
		}
		return 1.0
	#endif
}	